const puppeteer = require('puppeteer');

async function scrapeAvito(keyword, maxPrice, region = 'novosibirsk') {
  const query = `https://www.avito.ru/${region}?q=${encodeURIComponent(keyword)}`;
  console.log(`üëâ –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ: ${query}`);

  const browser = await puppeteer.launch({
    headless: 'new',
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  try {
    const page = await browser.newPage();
    await page.goto(query, { waitUntil: 'domcontentloaded', timeout: 15000 });

    await page.waitForSelector('[data-marker="item"]', { timeout: 5000 });

    const previews = await page.evaluate(() => {
      return [...document.querySelectorAll('[data-marker="item"]')].map(node => {
        const title = node.querySelector('h3')?.innerText?.trim() || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const price = parseInt(node.querySelector('meta[itemprop="price"]')?.content || '0', 10);
        const url = node.querySelector('a[data-marker="item-title"]')?.href || '';

        const locationRaw = node.querySelector('[data-marker="item-address"]')?.innerText?.trim();

        let location = locationRaw;
        if (!locationRaw && url) {
          try {
            const match = new URL(url).pathname.split('/');
            location = match[1] || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          } catch (e) {
            location = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
          }
        }

        return { title, price, url, location };
      });
    });

    const results = [];

    for (const ad of previews) {
      if (ad.price > maxPrice || !ad.url) continue;

      // üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏–∑ URL
      try {
        const pathParts = new URL(ad.url).pathname.split('/');
        const adRegion = pathParts[1]?.toLowerCase() || '';
        if (adRegion !== region.toLowerCase()) continue;
      } catch (e) {
        console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Ä–µ–≥–∏–æ–Ω –∏–∑ URL: ${ad.url}`);
        continue;
      }

      // üîß –î–æ–ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (ad.title === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è' || ad.location === '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
        try {
          const detailPage = await browser.newPage();
          await detailPage.goto(ad.url, { waitUntil: 'domcontentloaded', timeout: 30000 });

          if (ad.title === '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') {
            const titleDetail = await detailPage.evaluate(() => {
              return document.querySelector('h1[itemprop="name"]')?.innerText?.trim() || null;
            });
            if (titleDetail) ad.title = titleDetail;
          }

          if (ad.location === '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {
            const locationDetail = await detailPage.evaluate(() => {
              return document.querySelector('.style-item-address__string-wt61A')?.innerText?.trim() || null;
            });
            if (locationDetail) ad.location = locationDetail;
          }

          await detailPage.close();
        } catch (err) {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –¥–ª—è ${ad.url}: ${err.message}`);
        }
      }

      results.push(ad);
    }

    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${results.length} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:`);
    results.forEach(ad => {
      console.log(`- ${ad.title} | ${ad.price}‚ÇΩ | ${ad.location} | ${ad.url}`);
    });

    return results;
  } catch (err) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ Avito:`, err);
    return [];
  } finally {
    await browser.close();
  }
}

module.exports = { scrapeAvito };
